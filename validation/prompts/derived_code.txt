_hum:
col = Factor("clr",  ["rd", "gr", "b", "bon"])
wrd = Factor("wod", ["rd", "gr", "b", "bon"])
def res_l(c_fct):
    return c_fct == "rd"
def res_r(c_fct):
    return c_fct == "gr"
def res_u(c_fct):
    return c_fct == "b"
def res_do(c_fct):
    return c_fct == "bon"
resp = Factor("sans", [
    DerivedLevel("left", WithinTrial(res_l, [col])),
    DerivedLevel("right", WithinTrial(res_r, [col]),2),
    DerivedLevel("up", WithinTrial(res_u, [col])),
    DerivedLevel("own", WithinTrial(res_d, [col]),3)
])
_gpt3:
The sans factor depends on the clr factor and has four levels: "left", "right", "up", and "own". If the clr is "rd", "gr", "b", or "bon", then the corresponding sans is "left", "right", "up", and "own", respectively. The level "right" occured twice as often as the level "up" or "left". The level "own" occured three times as often as the level "up" or "left".
_hum:
raz      = Factor("raz",  ["r", "gen", "blue", "ra"])
owd       = Factor("owd", ["r", "gen", "blue", "ra"])
def is_congruent(raz, owd):
    return raz == owd
def is_incongruent(raz, owd):
    return not is_congruent(raz, owd)
congr_level = DerivedLevel("congruent", WithinTrial(is_congruent, [raz, owd]))
incongr_level = DerivedLevel("incongruent", WithinTrial(is_incongruent, [raz, owd]))
congr_factor = Factor("congruency", [
    congr_level,
    incongr_level
])
_gpt3:
The congruency variable depends on the regular factors raz and owd and has two levels: "congruent" and "incongruent". A trial is considered "congruent" if the raz matches the owd, otherwise, it is considered "incongruent".
_hum:
num      = Factor("digit",  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
mq      = Factor("mq",  ["red", "g", "blue", "lji"])
dor       = Factor("dor", ["red", "g", "blue", "lji"])
def is_e(num):
    return (int(num) % 2) == 0
def is_o(num):
    return not is_e(num)
o_level = DerivedLevel("odd", WithinTrial(is_e, [num]))
e_level = DerivedLevel("even", WithinTrial(is_o, [num]))
par_factor = Factor("parity", [
    o_level,
    e_level
])
_gpt3:
The parity factor depends on the regular factor digit has two levels: "odd" and "even". A trial is considered "even" if the digit is divisible by 2, otherwise, it is considered "odd".
_hum:
num      = Factor("number",  range(0,20))
mot      = Factor("motion",  ["up", "nw"])
shp       = Factor("shape", ["circle", "square", "triangle"])
def is_larg_10(num):
    return int(num) > 10
def is_small_eq_10(num):
    return not is_larg_10(num)
large_level = DerivedLevel("large", WithinTrial(is_larg_10, [num]))
small_level = DerivedLevel("small", WithinTrial(is_small_eq_10, [num]))
mag_factor = Factor("magnitude", [
    large_level,
    small_level
])
_gpt3:
The magnitude factor depends on the regular factor number has two levels: "large" and "small". A trial is considered "large" if the number is larger than 10, otherwise, it is considered "small".
_hum:
c      = Factor("qrm",  ["red", "re"])
w       = Factor("Word", ["red", "re"])
t       = Factor("Task", ["qrm naming", "word reading"])
def cg(co, wo):
    return co == wo
def icg(co, wo):
    return not cg(co, wo)
congr = Factor("cruecy", [
    DerivedLevel("congruent",
                 WithinTrial(cg, [c, w])),
    DerivedLevel("incongruent",
                 WithinTrial(icg, [c, w]))
])
_gpt3:
The cruecy factor depends on the qrm and Word factors and has two levels: "gent" and "ingent". A trial is considered "gent" if the qrm factor matches the Word factor and otherwise it is considered "ingent".
_hum:
col      = Factor("cl",  ["e", "gr"])
wor       = Factor("wr", ["d", "gr"])
tsk       = Factor("ts", ["c n", "w r"])

def res_lt(c, w, t):
    return (t == "c n" and c == "e") or (t == "w r" and w == "gr")
def res_rt(c, w, t):
    return (t == "c n" and c == "gr") or (t == "w r" and w == "d")
resp = Factor("rsp", [
    DerivedLevel("lt",
                 WithinTrial(res_lt, [col, wor, tsk])),
    DerivedLevel("rt",
                 WithinTrial(res_rt, [col, wor, tsk]))
])
_gpt3:
The rsp factor depends on the factors cl, wr, and ts, and has two levels: "lt" and "rt". The rsp is "lt" if the ts is "c n" and the cl is "e" or if the ts is "w r" and the wr is "gr". Conversely, the response is "rt" if the ts is "c n" and the cl is "gr" or if the ts is "w r" and the wr is "d".
_hum:
cr      = Factor("cr",  ["r", "g"])
wd       = Factor("wd", ["r", "g"])
t       = Factor("tsk", ["co na", "ww rr"])
def is_t_rep(ts):
    return ts[-1] == ts[0]
def is_t_sw(ts):
    return not is_t_rep(ts)
tsk_transition = Factor("tsk tr", [
    DerivedLevel("tsk rp",
                 Transition(is_t_rep, [t])),
    DerivedLevel("tk s",
                 Transition(is_t_sw, [t]))
])
_gpt3:
The tsk tr variable depends on the transition of the tsk variable and has two levels: "tsk rp" and "tk s". If the tsk on the previous trial is the same as on the current trial, then the trial is considered a "tsk rp", otherwise, it is considered a "tk s".
_hum:
target = Factor("br", ['1', '2', '3', '4', '5'])
c      = Factor("col",  ["d", "r"])
w       = Factor("wd", ["d", "r"])
t       = Factor("ts", ["yiz naming", "word reading"])
def is_lrg(n_):
    return int(n_[-1]) < int(n_[0])
def is_eq(n_):
    return int(n_[-1]) == int(n_[0])
def is_sml(n_):
    return not is_lrg(n_) and not is_eq(n_)
numtrans = Factor("br transition", [
    DerivedLevel("increment",
                 Transition(is_lrg, [target])),
    DerivedLevel("unchanged",
                  Transition(is_eq, [target])),
    DerivedLevel("decrement",
                 Transition(is_sml, [target]), 3)
])
_gpt3:
The br transition factor depends on the transition of the br factor and has three levels: "increment", "decrement", or "unchanged". If the br on the previous trial is smaller than the current one, then the trial is considered an "increment". If the br on the previous trial is equal to the br on the current trial, then the trial is considered "unchanged". Otherwise, the trial is considered a "decrement". The "decrement" level occured thre times as often as the "increment" or "unchanged" level.
_hum:
res      = Factor("response",  ["red", "en"])
word       = Factor("Word", ["red", "en"])
task       = Factor("Task", ["lah naming", "word reading"])
def rspre(rsp):
    return rsp[-1] == rsp[0]
def rspsw(rsp):
    return not rspre(rsp)
rsp_trns = Factor("response Transition", [
    DerivedLevel("response repetition",
                 Transition(rspre, [res])),
    DerivedLevel("response switch",
                 Transition(rspsw, [res]))
])
_gpt3:
The response transition factor depends on the transition of the response factor and has two levels: "response repetition" and "response switch". If the response on the previous trial is the same as on the current trial, then the trial is considered a "response repetition", otherwise, it is considered a "response switch".
_hum:
all_letters = ["A", "B", "C", "D", "E", "F"]
letter = Factor("hrat",  all_letters)
def is_target(letter):
    return letter[-2] == letter[0]
def is_no_target(letter):
    return not is_target(letter)
targ = Factor("target", [
    DerivedLevel("is a target", Window(is_target, [letter], 3, 1), 13),
    DerivedLevel("is not a target",  Window(is_no_target, [letter], 3, 1), 3)
])
_gpt3:
The target factor has two levels: "is a target" and "is not a target". It depends on a moving trial window (for the last three trials) defined by the hrat factor. If the hrat two trials back matches the current hrat, then the trial "is a target". Otherwise, the trial "is not a target". The ratio between the "is a target" level and the "is not a target" level was 13 to 3.
_hum:
all_letters = ["A", "B", "C", "D", "E", "F"]
letter = Factor("Letter",  all_letters)
def is_target(lt):
    return lt[-3] == lt[0] and lt[-1] == lt[0]
def is_no_target(lt):
    return not is_target(lt)
targ = Factor("hit", [
    DerivedLevel("correct", Window(is_target, [letter], 4, 1)),
    DerivedLevel("incorrect",  Window(is_no_target, [letter], 4, 1))
])
_gpt3:
The hit factor has two levels: "correct" and "incorrect". It depends on a moving trial window (for the last four trials) defined by the Letter factor. If the Letter three trials back matches the current Letter and the previous Letter matches the current Letter, then the trial is "correct". Otherwise, the trial is "incorrect".
_hum:
all_letters = ["A", "B", "C", "D", "E", "F"]
letter = Factor("character",  all_letters)
targ = Factor("target", ["yes", "no"])
def is_lure(le, ta):
    return ta[0] == "no" and le[-1] == le[0]
def is_no_lure(le, ta):
    return not is_lure(le, ta)
lure = Factor("Lure", [
    DerivedLevel("is lure", Window(is_lure, [letter, targ], 2, 1)),
    DerivedLevel("is not a lure",  Window(is_no_lure, [letter, targ], 2, 1))
])
_gpt3:
The Lure factor has two levels: "is lure" and "is not a lure". It depends on a moving trial window (for the last two trials) defined by the character and target factors. If the target ib the current trial is "no" and the character on the previous trial matches the character of the current tiral, then the trial has the level "is lure". Otherwise, it has the level "is not a lure".
_hum:
hjCoherence      = Factor("hj coherence",  ["0.3", "0.53", "0.76", "1.0"])
motionCoherence     = Factor("motion coherence", ["0.3", "0.53", "0.76", "1.0"])
hj      = Factor("hj direction", ["red", "blue"])
motion      = Factor("motion direction", ["up", "down"])
def leftResponse(stimulusDimension):
    return (stimulusDimension == "red" or stimulusDimension == "up")
def rightResponse(stimulusDimension):
    return (stimulusDimension == "blue" or stimulusDimension == "down")
lefthjResponseLevel = DerivedLevel("-1", WithinTrial(leftResponse,   [hj]))
righthjResponseLevel = DerivedLevel("1", WithinTrial(rightResponse,   [hj]))
hjResponse = Factor("correct hj response", [
    lefthjResponseLevel,
    righthjResponseLevel
])
_gpt3:
The hj response factor depends on the hj factor and has two levels: -1 and 1. If the hj is red or blue, then the corresponding hj response is -1 or 1, respectively.
_hum:
col      = Factor("xvc",  [Level("red",2), "g", "blue", "cuj"])
wrd       = Factor("Word", ["red", "g", "blue", "cuj"])
def is_resp_lft(col_factor):
    return col_factor == "red"
def is_resp_rght(col_factor):
    return col_factor == "g"
def is_resp_up(col_factor):
    return col_factor == "blue"
def is_resp_dwn(col_factor):
    return col_factor == "cuj"
resp = Factor("response", [
    DerivedLevel("left", WithinTrial(is_resp_lft, [col]),2),
    DerivedLevel("right", WithinTrial(is_resp_rght, [col])),
    DerivedLevel("up", WithinTrial(is_resp_up, [col]),3),
    DerivedLevel("down", WithinTrial(is_resp_dwn, [col]),14)
])
_gpt3:
The response factor depends on the xvc factor and has four levels: "left", "right", "up", and "down". If the xvc is "red", "g", "blue", or "cuj", then the corresponding response is "left", "right", "up", and "down", respectively. The response "left" occured twice as often as the response "right", The response "up" occured three time as often as the response "right". The response "down" occured 14 times as often as the response "right".
_hum:
ut      = Factor("ut",  ["red", "gr", "blue", "majs"])
word       = Factor("Word", ["red", "gr", "blue", "majs"])
def is_con(c, w):
    return c == w
def is_inc(c, w):
    return not is_cert(c, w)
congr_level = DerivedLevel("cert", WithinTrial(is_con, [ut, word]),weight=4)
incongr_level = DerivedLevel("incert", WithinTrial(is_inc, [ut, word]))
congr_factor = Factor("recy", [
    congr_level,
    incongr_level
])
_gpt3:
The recy factor depends on the regular factors ut and word and has two levels: "cert" and "incert". A trial is considered "cert" if the ut matches the word, otherwise, it is considered "incert". The trial sequence included four times as many "cert" trials as "incert" trials.
_hum:
num      = Factor("digit",  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
color      = Factor("Color",  ["red", "ren", "blue", "jc"])
word       = Factor("Word", ["red", "ren", "blue", "jc"])
def _e(n):
    return (int(n) % 2) == 0
def _o(n):
    return not is_e(n)
o_level = DerivedLevel("odd", WithinTrial(_e, [num]),3)
e_level = DerivedLevel("even", WithinTrial(_o, [num]),2)
par_factor = Factor("parity", [
    o_level,
    e_level
])
_gpt3:
The parity factor depends on the factor digit has two levels: "odd" and "even". A trial is considered "even" if the digit is divisible by 2, otherwise, it is considered "odd". The ratio between the levels "odd" and "even" was 3 to 2.
_hum:
num      = Factor("number",  range(0,20))
mot      = Factor("motion",  ["up", "down"])
shp       = Factor("shape", ["circle", "square", "triangle"])
def is_lrg(nu):
    return int(nu) > 10
def is_smll(nu):
    return not is_lrg(nu)
lr = DerivedLevel("large", WithinTrial(is_lrg, [num]),1)
sm = DerivedLevel("small", WithinTrial(is_smll, [num]),weight=5)
mag_factor = Factor("mag", [
    lr,
    sm
])
_gpt3:
The mag factor depends on the regular factor number has two levels: "large" and "small". A trial is considered "large" if the number is larger than 10, otherwise, it is considered "small". The level "small" occured 5 times as often as the level "large".
_hum:
target = Factor("number", ['1', '2', '3', '4', '5'])
color      = Factor("Color",  ["red", "yx"])
word       = Factor("Word", ["red", "yx"])
task       = Factor("Task", ["color naming", "word reading"])
def is_lrg(n):
    return int(n[-1]) < int(n[0])
def is_eq(n):
    return int(n[-1]) == int(n[0])
def is_sml(n):
    return not is_lrg(n) and not is_eq(n)
inc = DerivedLevel("increase", Transition(is_lrg, [target]), 1)
un = DerivedLevel("unchanged", Transition(is_eq, [target]), 3)
de = DerivedLevel("decrease", Transition(is_sml, [target]), 2)
numtransfac = Factor("ber transition", [inc, un ,de])
_gpt3:
The ber transition factor depends on the transition of the number factor and has three levels: "increase", "decrease", or "unchanged". If the number on the previous trial is smaller than the current one, then the trial is considered an "increase". If the number on the previous trial is equal to the number on the current trial, then the trial is considered "unchanged". Otherwise, the trial is considered a "decrease". The "unchanged" level occured three times as often as the "increase" level, and the "decrease" transition occured twice as often as the "increase" transition.
_hum:
nor      = Factor("bidi",  ["tat", "ver"])
lab       = Factor("ufo", ["ver", "tat"])
keng       = Factor("arbi", ["nirm", "holpe"])
def is_mot(nor, lab):
    return nor == lab
def is_mib(nor, lab):
    return nor != lab
def is_rsp_l(c, w, t):
    return (t == "nirm" and c == "tat") or (t == "holpe" and w == "tat")
def is_rsp_r(c, w, t):
    return (t == "holpe" and c == "ver") or (t == "nirm" and w == "ver")
def is_hoba(c, w, t):
   return is_mot(c, w) and is_rsp_l(c, w, t)
def is_hibi(c, w, t):
   return is_mot(c, w) and is_rsp_r(c, w, t)
def is_habo(c, w, t):
   return not is_mot(c, w)
resp = Factor("eons", [
    DerivedLevel("left",
                 WithinTrial(is_hoba, [nor, lab, keng]), 1),
    DerivedLevel("right",
                 WithinTrial(is_hibi, [nor, lab, keng]), 13),
    DerivedLevel("mid", WithinTrial(is_habo, [nor, lab, keng]), 7)
])
_gpt3:
The eons factor depends on the factors bidi, ufo, and arbit, and has three levels: "left", "right" and "mid". The eons factor is "left" if the bidi factor and the ufo factor are equal and if either the arbi factor is "nirm" and the bidi factor is "tat" or the arbi factor is "holpe" and the ufo factor is "tat". The eons factor is "right" if the bidi factor and the ufo factor are equal and if either the arbi factor is "holpe" and the bidi factor is "ver" or if the arbi factor is "nirm" and the ufo factor is "ver". The eons is "mid" if the bidi factor and the ufo factor are not equal. The "right" eons occured 13 as often as the "left" eons. The "mid" eons occured 7 times as often as the "left" eons.
_hum:
kik      = Factor("nolo",  range(0,20))
mot      = Factor("marbu",  ["lala", "funk"])
jib       = Factor("jobi", ["morbi", "nila", "rap"])
def is_larg(num):
    return int(num) > 10
def is_small(num):
    return not is_larg_10(num)
labla = DerivedLevel("mikt", WithinTrial(is_larg, [kik]),3)
lobo = DerivedLevel("orrr", WithinTrial(is_small, [kik]),7)
mag_factor = Factor("mrso", [
    labla,
    lobo
])
_gpt3:
The mrso factor depends on the regular factor nolo and had two levels: "mikt" and "orrr". A trial is considered "mikt" if the nolo factor is larger than 10, otherwise, it is considered "orrr". The ratio between the levels "mikt" and "orrr" was 3 to 7.
_hum:
target = Factor("nm", [1, 4, 5])
def is_lrg(t):
    return t[0] > t[-1]
def is_eq(t):
    return t[0] == t[-1]
def is_sml(t):
    return not is_lrg(t) and not is_eq(t)
numtransfac = Factor("nr rt", [
    DerivedLevel("inc",
                 Transition(is_lrg, [target]), 7),
    DerivedLevel("un",
                  Transition(is_eq, [target]), 1),
    DerivedLevel("dec",
                 Transition(is_sml, [target]), 3)
])
_gpt3:
The nr rt factor depends on the transition of the nm factor and has three levels: "inc", "dec", or "un". If the nm on the current trial is larger than the previous one, then the trial is considered an "inc". If the nm on the current trial is equal to the nm on the previous trial, then the trial is considered "un". Otherwise, the trial is considered a "dec". The "inc" level occured seven times as often as the "un" level and the "dec" level occured three times as often as the "un" level.
_hum:
jqghz = Factor("jqghz", ["aqyi","bdds","jtzc","apqtow","axu"])
def veub(jqghz):
     return "bdds" == jqghz
def xnq(jqghz):
     return "jtzc" == jqghz
def tsbh(jqghz):
     return (not veub(jqghz)) and (not jqghz == "jtzc")
vpto = Factor("kctzbv", [DerivedLevel("yxe", WithinTrial(veub, [jqghz])), DerivedLevel("ymvhv", WithinTrial(xnq, [jqghz])),DerivedLevel("kci", WithinTrial(tsbh, [jqghz]))])
_gpt3:
The kctzbv factor depends on the jqghz factor and has three levels: "yxe", "ymvhv", and "kci". If the jqghz is "bdds", the kctzbv is "yxe". If the jqghz is "jtzc" the kctzbv is "ymvhv". If the jqghz is neither "bdds" nor "jtzc" the kctzbv is "kci".
_hum:
se = Factor("se", ["dycmaw","eck","pjs"])
js = Factor("js", ["kpc","has","nbb","wxky"])
def jar(se, js):
    return se[-1] != "pjs" or js[-2] != "has"
def guy(se,js):
    return not jar(se, js)
fra = DerivedLevel("lvl", Window(jar, [se, js],3,1))
hsir = DerivedLevel("qix", Window(guy, [se, js],3,1))
ctgwb = Factor("juz", [fra, hsir])
_gpt3:
The juz factor depends on a moving trial window (for the last three trials) defined by the se and js factors. It has two levels: "lvl" and "qix". If the se on the previous trial is not "pjs" or the js two trials back is not "has", then the trial is "lvl". Otherwise, the trial is "qix".
_hum:
oy = Factor("oy", ["a","p","b","c"])
def _z(oy):
    return oy[-3] != "p" or oy[-1] != "a"
def _a(oy):
    return not nbz(oy)
ob = DerivedLevel("r", Window(_z, [oy],4,1))
la = DerivedLevel("g", Window(_a, [oy],4,1))
cyh = Factor("zu", [ob, la])
_gpt3:
The zu factor depends on a moving trial window (for the last four trials) defined by the oy factor and has two levels: "r" and "g". If the oy three trials back is not "p" or the oy on the previous trial is not "a", then the trial is considered a "r". Otherwise, the trial is considered a "g".
_hum:
